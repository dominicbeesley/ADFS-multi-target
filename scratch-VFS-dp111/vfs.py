from collections import OrderedDict

from commands import *
import acorn

def my_stringhi_hook(target, addr):
    return stringhi(addr + 3, include_terminator_fn=lambda b: True)
#config.set_label_references(False)
config.set_hex_dump(True)
#config.set_bytes_as_ascii(False)
#config.set_show_autogenerated_labels(False)
#config.set_show_cpu_state(False)
#config.set_show_char_literals(False)
#config.set_show_all_labels(False)

load(0x8000, "VFS170.rom", "65C02")

acorn.master()
acorn.is_sideways_rom()

label(0xfe80, "scsi_data")
label(0xfe81, "scsi_status_byte")
label(0xfe82, "scsi_nSEL")
label(0xfe83, "scsi_enable_disable_IRQ")


label(0xcc, "scsi_status_zp") 
label(0xcd, "tube_used_zp") 
# bit 7
# bit 6 tube used flag
# bit 5
# bit 4
# bit 3
# bit 2
# bit 1
# bit 0

label(0xf3, "os_text_ptr1")
label(0x291, "os_interlace_flag")

label(0xd92, "vfs_flags1")
label(0xd93, "vfs_25Hz_timer_lo")
label(0xd94, "vfs_25Hz_timer_hi")
label(0xd95, "vfs_100Hz_timer")
label(0xd96, "vfs_flags2")
label(0xd97, "vfs_old_bytev1")
label(0xd98, "vfs_old_bytev2")
label(0xd99, "vfs_irq1")
label(0xd9a, "vfs_irq2")
label(0xd9b, "vfs_old_irq1v1")
label(0xd9c, "vfs_old_irq1v2")
label(0xd9d, "vfs_old_irq1v1a")
label(0xd9e, "vfs_old_irq1v2a")

label(0xdf0, "rom_private_byte")

label(0x8025, "claim_tube")
label(0x803f, "release_tube")
label(0x8058, "shadow_to_main")
label(0x8074, "read_drive_status")
label(0x8087, "set_scsi_to_command_mode")
comment(0x80a4,"unused jmp 827c")
label(0x80a7, "access_scsi_drive")
comment(0x80a7,""" Access a drive using SCSI protocol 
==================================
 Transfer up to &FF00 bytes at a time
 XY=>control block:
   XY+ 0  Flag on entry, Returned result on exit
   XY+ 1  Addr0
   XY+ 2  Addr1
   XY+ 3  Addr2
   XY+ 4  Addr3
   XY+ 5  Command
   XY+ 6  Drive+Sector b16-19
   XY+ 7  Sector b8-b15
   XY+ 8  Sector b0-b7
   XY+ 9  Sector Count
   XY+10  -
   XY+11  Length0
   XY+12  Length1
   XY+13  Length2
   XY+14  Length3
   XY+15
 
 On exit: A=result. 0=OK, <>0=error, with VFS error block filled in
""")

comment(0x919f,""" Select LVFS
 ===========
 Stack now holds:
   top-1: Key pressed, &FF=none or *adfs, &41='A', &43='F' or *fadfs or
                       Serv08+Dir+Hard/PowerBreak, &79='->', &00/&08=Serv12
   top-2: Boot flag, &00=boot, <>&00=no boot
""")

label(0xc144, "tube_data_transfer")
label(0x82e0, "ensure_drive")
label(0x82ea, "wait_for_scsi_REQ")
label(0x9b38, "check_directory_for_Hugo")
label(0x849b, "Hugo_string")

label(0x8421, "nibble_to_asciihexdigit")

label(0x9342, "vfs_string")

label(0xb61b, "service_handler_100Hz")

label(0x8410, "hex_byte_on_stack")
label(0x8cd1, "hex_byte_print")
label(0x9728, "print_char")

label(0x83ff, "at_string")
label(0x8404, "nochannel_string")

hook_subroutine(0x8326, "generate_error_inline", stringz_hook)
hook_subroutine(0x8309, "generate_error_inline2", stringz_hook)
hook_subroutine(0x832d, "generate_error_inline3", stringz_hook)
label(0xc2d7, "screen_memory_flag")
hook_subroutine(0x8c57, "print_string", my_stringhi_hook)

label(0xa7c6, "VIDEO_string")
label(0xa7cb, "MOUSE_string")
label(0xa7d0, "TRACKERBALL_string")


rts_code_ptr(0x8f86,0x8f90 )
rts_code_ptr(0x8f87,0x8f91 )
rts_code_ptr(0x8f88,0x8f92 )
rts_code_ptr(0x8f89,0x8f93 )
rts_code_ptr(0x8f8a,0x8f94 )
rts_code_ptr(0x8f8b,0x8f95 )
rts_code_ptr(0x8f8c,0x8f96 )
rts_code_ptr(0x8f8d,0x8f97 )
rts_code_ptr(0x8f8e,0x8f98 )
rts_code_ptr(0x8f8f,0x8f99 )

expr(0x95b5,"vfs_command_table+2")
expr(0x9665,"vfs_command_table+1")
label(0x96b4, "vfs_command_table")
stringhi(0x96b4)

label(0xa79c, "command_table")
expr_label(0xa79d,"command_table+1")
label(0xaf6c, "MOUSE_command")
code_ptr(0xa7a2, 0xa7a1, offset=0)
label(0xafda, "POINTER_command")
code_ptr(0xa7ab, 0xa7aa, offset=0)
label(0xb79b, "TMAX_command")
code_ptr(0xa7b1, 0xa7b0, offset=0)
label(0xaf6c, "TRACKERBALL_command")
code_ptr(0xa7be, 0xa7bd, offset=0)
label(0xb7cc, "TSET_command")
code_ptr(0xa7c4, 0xa7c3, offset=0)

label(0x9ab7, "BACK_command")
rts_code_ptr(0x96b9, 0x96b8)

label(0x97c9, "BYE_command")
rts_code_ptr(0x96bf, 0x96be)

label(0x8ef5, "DIR_command")
rts_code_ptr(0x96c5, 0x96c4)

label(0x9804, "DISMOUNT_command")
rts_code_ptr(0x96d0, 0x96cf)

label(0x974f, "FREE_command")
rts_code_ptr(0x96d7, 0x96d6)

label(0x9a9f, "LCAT_command")
rts_code_ptr(0x96de, 0x96dd)

label(0x9aab, "LEX_command")
rts_code_ptr(0x96e4, 0x96e3)

label(0x9a64, "LIB_command")
rts_code_ptr(0x96ea, 0x96e9)

label(0x977e, "MAP_command")
rts_code_ptr(0x96f0, 0x96ef)

label(0x9864, "MOUNT_command")
rts_code_ptr(0x96f8, 0x96f7)

rts_code_ptr(0x96fb, 0x96fa)
label(0x8F5D,"Get_CMOS_bit6")
label(0x9076,"Get_CMOS_byte")
label(0xC2D8,"CMOS_byte_copy")# Bit 7 and bit 6 used

label(0xA6F1,"Mouse_service_handler")

wordentry(0x92f5)

wordentry(0x92f8)

wordentry(0x92fb)
wordentry(0x92fe)
wordentry(0x9301)
wordentry(0x9304)
wordentry(0x9307)

label(0x8bf1,"vector1")

rts_code_ptr(0x95f4,0x9600)
rts_code_ptr(0x95f5,0x9601)
rts_code_ptr(0x95f6,0x9602)
rts_code_ptr(0x95f7,0x9603)
rts_code_ptr(0x95f8,0x9604)
rts_code_ptr(0x95f9,0x9605)
rts_code_ptr(0x95fa,0x9606)
rts_code_ptr(0x95fb,0x9607)
rts_code_ptr(0x95fc,0x9608)
rts_code_ptr(0x95fd,0x9609)
rts_code_ptr(0x95fe,0x960a)
rts_code_ptr(0x95ff,0x960b)

def stringz_no_return_hook(target, addr):
    stringcr_hook(target, addr) # discard return address
    return None

hook_subroutine(0xab3d,"print_indexed_string",stringz_no_return_hook)
nonentry(0xad97) # preceding BNE is always taken
label(0x95ce,"string_spec_list_pointers")
label(0x9669,"string_list_spec")
label(0x9675,"string_ob_spec")
label(0x967f,"string_starob_spec")
label(0x968b,"string_drive")
label(0x9695,"string_sp_lp")
label(0x969f,"string_LWRE")
label(0x96ac,"string_title")
label(0x96b3,"string_Null")
expr(0x95ce,"<string_Null")
expr(0x95cf,"<string_list_spec")
expr(0x95d0,"<string_ob_spec")
expr(0x95d1,"<string_starob_spec")
expr(0x95d2,"<string_drive")
expr(0x95d3,"<string_sp_lp")
expr(0x95d4,"<string_LWRE")
expr(0x95d5,"<string_title")

expr(0x8c34,">string_list_spec")

label(0x8dd5,"opt4_string_table_pointer")
label(0x8dd9,"string_Off")
label(0x8ddd,"string_Load")
label(0x8de1,"string_Run")
label(0x8de5,"string_Exec")
expr(0x8dd5,"<string_Off")
expr(0x8dd6,"<string_Load")
expr(0x8dd7,"<string_Run")
expr(0x8dd8,"<string_Exec")
expr(0x8d3d,">string_Off")

label(0x8e82,"table1")
expr(0x8766,"<table1")
expr(0x876a,">table1")

label(0x867c,"table2")
expr(0x86fd,"<table2")
expr(0x86ff,">table2")

expr(0x881e,"<table2")
expr(0x8820,">table2")

expr(0xa219,"<table2")
expr(0xa21b,">table2")

expr(0xa27d,"<table2")
expr(0xa27f,">table2")

label(0x8687,"table3")
expr(0x871a,"<table3")
expr(0x8718,">table3")

label(0x97d0,"SCSI_bye")
expr(0x97ca,"<SCSI_bye")
expr(0x97cc,">SCSI_bye")

label(0x92df,"zeroLIB_string")
expr(0x926f,"<zeroLIB_string")
expr(0x9273,">zeroLIB_string")

label(0x996a,"dirdata")
expr(0x9887,"<dirdata")
expr(0x988b,">dirdata")

stringcr(0x847c)
expr(0x83bf,"<starEdot")
expr(0x83c9,"<starSPdot")
expr(0x83ef,"<starEdot")
expr(0x83f5,"<starSPdot")
label(0x847c,"starEdot")
label(0x847f,"starSPdot")
expr(0x8493,">starEdot")
comment(0x847c,"*** string table must not cross a page boundary")
stringhi(0xa79c)

comment(0x8f6a,"*** string table must not cross a page boundary")

label(0x8f6a,"bootcommand_pointer_table")
expr(0x92c3,"bootcommand_pointer_table-1")
expr(0x92c6,">bootcommand_pointer_table")
byte(0x8f6a,3)

label(0x8f6d,"starLOAD_boot")
expr(0x8f6a,"<starLOAD_boot")
expr(0x8f6b,"<String_dollarBOOT")
expr(0x8f6c,"<starEdot_VFS_dotBOOT")

label(0x8f6f,"String_cr")
stringcr(0x8f77)
label(0x8f77,"starEdot_VFS_dotBOOT")

stringcr(0x8f6d)



label(0x9156,"Initalise_filesystem")


label(0x8fb6,"Service_handler_NOP")
label(0x9107,"Service_handler_AbsoluteWorkSpaceClaim")
label(0x9108,"Service_handler_PrivateWorkSpaceClaim")
label(0x9161,"Service_handler_Autoboot")
label(0x9425,"Service_handler_UnrecognisedCommand")
label(0x9cfd,"Service_handler_UnrecognisedInterrupt")
label(0x8fb6,"Service_handler_BRK")
label(0x8fb6,"Service_handler_UnrecognisedOSByte")
label(0x9461,"Service_handler_UnrecognisedOSWord")
label(0x9529,"Service_handler_StarHELP")

rts_code_ptr(0x8f79+0x21,0x8f82+0x21)
rts_code_ptr(0x8f79+0x22,0x8f82+0x22)
rts_code_ptr(0x8f79+0x23,0x8f82+0x23)
rts_code_ptr(0x8f79+0x24,0x8f82+0x24)
rts_code_ptr(0x8f79+0x25,0x8f82+0x25)
rts_code_ptr(0x8f79+0x26,0x8f82+0x26)
rts_code_ptr(0x8f79+0x27,0x8f82+0x27)
rts_code_ptr(0x8f79+0x28,0x8f82+0x28)
rts_code_ptr(0x8f79+0x29,0x8f82+0x29)

label(0x930a,"Service_handler_OfferHiddenStaticWorkspace")
label(0x9311,"Service_handler_OfferHiddenDynamicWorkspace")
label(0x9325,"Service_handler_DynamicWorkspaceRequirements")
label(0x932a,"Service_handler_InformMosofNameRequirements")
label(0x9345,"Service_handler_CloseAllFiles")
label(0x9363,"Service_handler_ResetOccured")
label(0x8fe3,"Service_handler_UnkownConfigureOption")
label(0x90ad,"Service_handler_UnkownStatusOption")

label(0x990d,"IRQ1_vector_entry")
expr(0x940a,"<IRQ1_vector_entry")
expr(0x9405,">IRQ1_vector_entry")

label(0x98b7,"SCSI_drive_access_data")
expr(0x9871,"<SCSI_drive_access_data")
expr(0x9873,">SCSI_drive_access_data")

label(0x9bf8,"Function_entered_via_rts_onstack")
expr(0x9bdf,"<(Function_entered_via_rts_onstack-1)")
expr(0x9be4,">(Function_entered_via_rts_onstack-1)")
#rts_code_ptr(0x9bdf,0x9be4)

label(0xb566,"rts_call_via_rti")
expr(0xb55e,"<(rts_call_via_rti)")
expr(0xb55b,">(rts_call_via_rti)")
entry(0xb566)

label(0xb4b6,"OSBYTE_Extended_Vectorcode")
expr(0x93c8,"<OSBYTE_Extended_Vectorcode")
expr(0x93d2,">OSBYTE_Extended_Vectorcode")
entry(0xb4b6)

label(0x8c50,"print_X_spaces")
label(0x9722,"print_space")

expr(0x8c06,"l8c20+1")
rts_code_ptr(0x8c20+0,0x8c21+0)
rts_code_ptr(0x8c20+2,0x8c21+2)
rts_code_ptr(0x8c20+4,0x8c21+4)
rts_code_ptr(0x8c20+6,0x8c21+6)
rts_code_ptr(0x8c20+8,0x8c21+8)
rts_code_ptr(0x8c20+10,0x8c21+10)
rts_code_ptr(0x8c20+12,0x8c21+12)
rts_code_ptr(0x8c20+14,0x8c21+14)
rts_code_ptr(0x8c20+16,0x8c21+16)

code_ptr(0xb8af,0xb8ae)
code_ptr(0xb8b8,0xb8b7)
code_ptr(0xb8bf,0xb8be)
code_ptr(0xb8c5,0xb8c4)
code_ptr(0xb8cc,0xb8cb)
code_ptr(0xb8d3,0xb8d2)
code_ptr(0xb8d9,0xb8d8)
code_ptr(0xb8e1,0xb8e0)
code_ptr(0xb8e7,0xb8e6)
code_ptr(0xb8ed,0xb8ec)
code_ptr(0xb8f4,0xb8f3)
code_ptr(0xb900,0xb8ff)
code_ptr(0xb908,0xb907)
code_ptr(0xb915,0xb914)
code_ptr(0xb924,0xb923)
code_ptr(0xb933,0xb932)
code_ptr(0xb937,0xb936)
code_ptr(0xb93e,0xb93d)

label(0xb8a9,"star_command_table")
expr(0xb87d,"star_command_table+1")

label(0xadef,"star_AUDIO")
label(0xac51,"star_CHAPTER")
label(0xab61,"star_EJECT")
label(0xae16,"star_FAST")
label(0xac24,"star_FCODE")
label(0xacea,"star_FRAME")
label(0xaea2,"star_PLAY")
label(0xacc8,"star_SEARCH")

label(0xae27,"star_SLOW")
label(0xad67,"star_STEP")
label(0xacde,"star_STILL")
label(0xac14,"star_VOCOMPUTER")
label(0xac10,"star_VODISC")
label(0xac20,"star_VOHIGHLIGHT")
label(0xac18,"star_VOSUPERIMPOSE")
label(0xac1c,"star_VOTRANSPARENT")

label(0xabc7,"star_VP")
label(0xac49,"star_RESET")

#code_ptr(0x8d13,0x8d17)
label(0x8f42,"unknown_table1")
expr(0x8d13,"<unknown_table1")
expr(0x8d17,">unknown_table1")

label(0x8483,"OSBYTE_YFFX0")
label(0x8485,"OSBYTE_X0")

comment(0x83b2,"osbyte *exec file handle")
comment(0x83e9,"osbyte *exec file handle")
comment(0x91d0,"osbyte read address of rom pointer")
label(0x8f63,"OSBYTE_last_break_type")

comment(0x92d0,"osbyte read tube presents ")
label(0x92d0,"update_tube_present_flag")

comment(0x972b,"osbyte set *spool file handle to zero")
comment(0x9a5b,"excute code on co pro.")


comment(0xa532,"Initalise writing of copro ram")
comment(0xa69f,"Initalise reading of copro ram")

expr(0x8e7c,">table1")

label(0x92e7,"osvector_table")
word(0x92e7,7)

expr(0x95b5,"vfs_command_table+2")
expr(0x9665,"vfs_command_table+1")

expr(0x983f,"unset_string-2")
label(0x9849,"unset_string")

comment(0xb50a,"ADVAL handler")
comment(0xb52f,"ADVAL(9) - read buttons")

label(0xb54f,"Extended_IRQ1_Vector")
expr(0x940f,"<Extended_IRQ1_Vector")
expr(0x9414,">Extended_IRQ1_Vector")

comment(0xb567,"Mouse has moved")
comment(0xb61b,"Service &15 - 100Hz poll - check if mouse has moved ")

comment(0xb65b,"Check pointing device type")

comment(0xb67e,"Check if button state has changed")
comment(0xb698,"Button state has changed - generate keypress")


go()
