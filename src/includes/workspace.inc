	.include "config.inc"

.ifndef __WORKSPACE_INC__
__WORKSPACE_INC__:

.if TARGETOS > 1 || .def(AUTOHAZEL)
WKSP_BASE			= $C000
.else
WKSP_BASE			= $0E00
.endif

;;	 Workspace
;;	 =========
;;E00	 C000-FF Free Space Map sector 0
;;F00	 C100-FF Free Space Map sector 1
;;1000	 C200-FF Workspace
;;1100	 C300-FF Workspace
;;1200	 C400-FF Directory buffer
;;1300	 C500-FF Directory buffer
;;1400	 C600-FF Directory buffer
;;1500	 C700-FF Directory buffer
;;1600	 C800-FF Directory buffer
;;1700	 C900-FF Random access buffer 1 - also *CDIR buffer
;;1800	 CA00-FF Random access buffer 2
;;1900	 CB00-FF Random access buffer 3
;;2000	 CC00-FF Random access buffer 4
;;2100	 CD00-FF Random access buffer 5
;;
;;	 C200-14
;;	 C215-23 Disk access control block
;;	 C224-27
;;	 C228-2B
;;	 C22C-2F Current Selected Directory?
;;	 C230-33
;;	 C234-37 Current object sector
;;	 C238-3F
;;	 C240-51 Control block for commands translated to OSFILE calls
;;	 C262-6B Current object name
;;
;;	 C300-09 Current directory name
;;	 C30A-13 Current library name
;;	 C314-17 Current directory sector
;;	 C318-1B Library directory sector
;;	 C31C-1F Previous directory sector
;;	  byte 0/1/2 = sector
;;	  byte 3     = drive*32, &FF=unset
;;	 C320 - saved FLAGS
WKSP_ADFS_000_FSM_S0		= WKSP_BASE + $0000
WKSP_ADFS_100_FSM_S1		= WKSP_BASE + $0100
WKSP_ADFS_200			= WKSP_BASE + $0200
WKSP_ADFS_227_TUBE_XFER		= WKSP_BASE + $0227
WKSP_ADFS_22B			= WKSP_BASE + $022B
WKSP_ADFS_22C_CSD		= WKSP_BASE + $022C
WKSP_ADFS_237			= WKSP_BASE + $0237
WKSP_ADFS_300_CSDNAME		= WKSP_BASE + $0300
WKSP_ADFS_30A_LIBNAME		= WKSP_BASE + $030A

WKSP_ADFS_320_FLAGS_SAVE	= WKSP_BASE + $0320
WKSP_ADFS_400_DIR_BUFFER	= WKSP_BASE + $0400
WKSP_ADFS_405_DIR_START		= WKSP_ADFS_400_DIR_BUFFER + $05
WKSP_ADFS_409			= WKSP_ADFS_400_DIR_BUFFER + $09
WKSP_ADFS_500_DIR_BUFFER	= WKSP_BASE + $0500
WKSP_ADFS_600_DIR_BUFFER	= WKSP_BASE + $0600
WKSP_ADFS_700_DIR_BUFFER	= WKSP_BASE + $0700
WKSP_ADFS_800_DIR_BUFFER	= WKSP_BASE + $0800
WKSP_ADFS_800_DIR_C0		= WKSP_ADFS_800_DIR_BUFFER + $C0
WKSP_ADFS_800_DIR_D9		= WKSP_ADFS_800_DIR_BUFFER + $D9
WKSP_ADFS_900_RND_BUFFER	= WKSP_BASE + $0900
WKSP_ADFS_A00_RND_BUFFER	= WKSP_BASE + $0A00
WKSP_ADFS_B00_RND_BUFFER	= WKSP_BASE + $0B00
WKSP_ADFS_C00_RND_BUFFER	= WKSP_BASE + $0C00
WKSP_ADFS_D00_RND_BUFFER	= WKSP_BASE + $0D00
WKSP_ADFS_E00_END		= WKSP_BASE + $0E00

WKSP_ADFS_201			= WKSP_BASE + $0201
WKSP_ADFS_202			= WKSP_BASE + $0202
WKSP_ADFS_203			= WKSP_BASE + $0203
WKSP_ADFS_204			= WKSP_BASE + $0204
WKSP_ADFS_208			= WKSP_BASE + $0208
WKSP_ADFS_20C			= WKSP_BASE + $020C
WKSP_ADFS_20D			= WKSP_BASE + $020D
WKSP_ADFS_20E			= WKSP_BASE + $020E
WKSP_ADFS_210			= WKSP_BASE + $0210
WKSP_ADFS_211			= WKSP_BASE + $0211
WKSP_ADFS_214			= WKSP_BASE + $0214
WKSP_ADFS_215_DSKOPSAV_RET	= WKSP_BASE + $0215
WKSP_ADFS_216_DSKOPSAV_MEMADDR	= WKSP_BASE + $0216
WKSP_ADFS_21A_DSKOPSAV_CMD	= WKSP_BASE + $021A
WKSP_ADFS_21B_DSKOPSAV_SEC	= WKSP_BASE + $021B				; big endian!
WKSP_ADFS_21E_DSKOPSAV_SECCNT	= WKSP_BASE + $021E
WKSP_ADFS_21F_DSKOPSAV_CTL	= WKSP_BASE + $021F
WKSP_ADFS_220_DSKOPSAV_XLEN	= WKSP_BASE + $0220				; little endian!
WKSP_ADFS_224			= WKSP_BASE + $0224
WKSP_ADFS_228			= WKSP_BASE + $0228
WKSP_ADFS_229			= WKSP_BASE + $0229
WKSP_ADFS_22A			= WKSP_BASE + $022A
WKSP_ADFS_22D			= WKSP_BASE + $022D
WKSP_ADFS_22E			= WKSP_BASE + $022E
WKSP_ADFS_22F			= WKSP_BASE + $022F
WKSP_ADFS_230			= WKSP_BASE + $0230
WKSP_ADFS_233			= WKSP_BASE + $0233
WKSP_ADFS_234			= WKSP_BASE + $0234
WKSP_ADFS_235			= WKSP_BASE + $0235
WKSP_ADFS_236			= WKSP_BASE + $0236
WKSP_ADFS_238			= WKSP_BASE + $0238
WKSP_ADFS_23A			= WKSP_BASE + $023A
WKSP_ADFS_23B			= WKSP_BASE + $023B
WKSP_ADFS_23C			= WKSP_BASE + $023C
WKSP_ADFS_23D			= WKSP_BASE + $023D
WKSP_ADFS_23E			= WKSP_BASE + $023E
WKSP_ADFS_23F			= WKSP_BASE + $023F
WKSP_ADFS_240			= WKSP_BASE + $0240
WKSP_ADFS_241			= WKSP_BASE + $0241
WKSP_ADFS_242			= WKSP_BASE + $0242
WKSP_ADFS_243			= WKSP_BASE + $0243
WKSP_ADFS_246			= WKSP_BASE + $0246
WKSP_ADFS_247			= WKSP_BASE + $0247
WKSP_ADFS_248			= WKSP_BASE + $0248
WKSP_ADFS_249			= WKSP_BASE + $0249
WKSP_ADFS_24A			= WKSP_BASE + $024A
WKSP_ADFS_24B			= WKSP_BASE + $024B
WKSP_ADFS_24C			= WKSP_BASE + $024C
WKSP_ADFS_24D			= WKSP_BASE + $024D
WKSP_ADFS_24F			= WKSP_BASE + $024F
WKSP_ADFS_250			= WKSP_BASE + $0250
WKSP_ADFS_252			= WKSP_BASE + $0252
WKSP_ADFS_253			= WKSP_BASE + $0253
WKSP_ADFS_254			= WKSP_BASE + $0254
WKSP_ADFS_25D			= WKSP_BASE + $025D
WKSP_ADFS_25E			= WKSP_BASE + $025E
WKSP_ADFS_25F			= WKSP_BASE + $025F
WKSP_ADFS_260			= WKSP_BASE + $0260
WKSP_ADFS_261			= WKSP_BASE + $0261
WKSP_ADFS_262			= WKSP_BASE + $0262
WKSP_ADFS_263			= WKSP_BASE + $0263
WKSP_ADFS_26C			= WKSP_BASE + $026C
WKSP_ADFS_26F			= WKSP_BASE + $026F
WKSP_ADFS_270			= WKSP_BASE + $0270
WKSP_ADFS_273			= WKSP_BASE + $0273
WKSP_ADFS_274			= WKSP_BASE + $0274
WKSP_ADFS_27E			= WKSP_BASE + $027E
WKSP_ADFS_27F			= WKSP_BASE + $027F
WKSP_ADFS_280			= WKSP_BASE + $0280
WKSP_ADFS_289			= WKSP_BASE + $0289
WKSP_ADFS_28C			= WKSP_BASE + $028C
WKSP_ADFS_28D			= WKSP_BASE + $028D
WKSP_ADFS_291			= WKSP_BASE + $0291
WKSP_ADFS_292			= WKSP_BASE + $0292
WKSP_ADFS_293			= WKSP_BASE + $0293
WKSP_ADFS_294			= WKSP_BASE + $0294
WKSP_ADFS_295			= WKSP_BASE + $0295
WKSP_ADFS_296			= WKSP_BASE + $0296
WKSP_ADFS_297			= WKSP_BASE + $0297
WKSP_ADFS_298			= WKSP_BASE + $0298
WKSP_ADFS_29A			= WKSP_BASE + $029A
WKSP_ADFS_29B			= WKSP_BASE + $029B
WKSP_ADFS_29C			= WKSP_BASE + $029C
WKSP_ADFS_29D			= WKSP_BASE + $029D
WKSP_ADFS_29E			= WKSP_BASE + $029E
WKSP_ADFS_29F			= WKSP_BASE + $029F
WKSP_ADFS_2A0			= WKSP_BASE + $02A0
WKSP_ADFS_2A1			= WKSP_BASE + $02A1
WKSP_ADFS_2A2			= WKSP_BASE + $02A2
WKSP_ADFS_2A3			= WKSP_BASE + $02A3
WKSP_ADFS_2A4			= WKSP_BASE + $02A4
WKSP_ADFS_2A5			= WKSP_BASE + $02A5
WKSP_ADFS_2A6			= WKSP_BASE + $02A6
WKSP_ADFS_2A7			= WKSP_BASE + $02A7
WKSP_ADFS_2A8			= WKSP_BASE + $02A8
WKSP_ADFS_2A9			= WKSP_BASE + $02A9
WKSP_ADFS_2AA			= WKSP_BASE + $02AA
WKSP_ADFS_2AB			= WKSP_BASE + $02AB
WKSP_ADFS_2AC			= WKSP_BASE + $02AC
WKSP_ADFS_2AD			= WKSP_BASE + $02AD
WKSP_ADFS_2B4			= WKSP_BASE + $02B4
WKSP_ADFS_2B5			= WKSP_BASE + $02B5
WKSP_ADFS_2B6			= WKSP_BASE + $02B6
WKSP_ADFS_2B7			= WKSP_BASE + $02B7
WKSP_ADFS_2B8			= WKSP_BASE + $02B8
WKSP_ADFS_2B9			= WKSP_BASE + $02B9
WKSP_ADFS_2BA			= WKSP_BASE + $02BA
WKSP_ADFS_2BB			= WKSP_BASE + $02BB
WKSP_ADFS_2BC			= WKSP_BASE + $02BC
WKSP_ADFS_2BF			= WKSP_BASE + $02BF
WKSP_ADFS_2C0			= WKSP_BASE + $02C0
WKSP_ADFS_2C1			= WKSP_BASE + $02C1
WKSP_ADFS_2C2			= WKSP_BASE + $02C2
WKSP_ADFS_2C3			= WKSP_BASE + $02C3
WKSP_ADFS_2C8			= WKSP_BASE + $02C8
WKSP_ADFS_2C9			= WKSP_BASE + $02C9
WKSP_ADFS_2CA			= WKSP_BASE + $02CA
WKSP_ADFS_2CB			= WKSP_BASE + $02CB
WKSP_ADFS_2CC			= WKSP_BASE + $02CC
WKSP_ADFS_2CD			= WKSP_BASE + $02CD
WKSP_ADFS_2CE			= WKSP_BASE + $02CE
WKSP_ADFS_2CF			= WKSP_BASE + $02CF
WKSP_ADFS_2D0_ERR_SECTOR	= WKSP_BASE + $02D0	; little endian!
;;WKSP_ADFS_2D0_ERR_SECTOR+1			= WKSP_BASE + &02D1
;;WKSP_ADFS_2D2			= WKSP_BASE + &02D2
WKSP_ADFS_2D3_ERR_CODE		= WKSP_BASE + $02D3
WKSP_ADFS_2D4			= WKSP_BASE + $02D4
WKSP_ADFS_2D5_CUR_CHANNEL			= WKSP_BASE + $02D5
WKSP_ADFS_2D6			= WKSP_BASE + $02D6
WKSP_ADFS_2D7_SHADOW_SAVE	= WKSP_BASE + $02D7
WKSP_ADFS_2D8			= WKSP_BASE + $02D8
WKSP_ADFS_2D9			= WKSP_BASE + $02D9
WKSP_ADFS_2E0			= WKSP_BASE + $02E0
WKSP_ADFS_2E1			= WKSP_BASE + $02E1
WKSP_ADFS_2E2			= WKSP_BASE + $02E2
WKSP_ADFS_2E3_ERR_NO			= WKSP_BASE + $02E3
WKSP_ADFS_2E4			= WKSP_BASE + $02E4
WKSP_ADFS_2E5			= WKSP_BASE + $02E5
WKSP_ADFS_2E6			= WKSP_BASE + $02E6
WKSP_ADFS_2E7_STKSAVE		= WKSP_BASE + $02E7
WKSP_ADFS_2E8_FDC_CMD_STEP			= WKSP_BASE + $02E8

WKSP_ADFS_2EC_HOG_QRY		= WKSP_BASE + $02EC

WKSP_ADFS_2FE			= WKSP_BASE + $02FE
WKSP_ADFS_313			= WKSP_BASE + $0313
WKSP_ADFS_314			= WKSP_BASE + $0314
WKSP_ADFS_315			= WKSP_BASE + $0315
WKSP_ADFS_316			= WKSP_BASE + $0316
WKSP_ADFS_317_CURDRV		= WKSP_BASE + $0317
WKSP_ADFS_318			= WKSP_BASE + $0318
WKSP_ADFS_319			= WKSP_BASE + $0319
WKSP_ADFS_31A			= WKSP_BASE + $031A
WKSP_ADFS_31B			= WKSP_BASE + $031B
WKSP_ADFS_31C			= WKSP_BASE + $031C
WKSP_ADFS_31D			= WKSP_BASE + $031D
WKSP_ADFS_31E			= WKSP_BASE + $031E
WKSP_ADFS_31F			= WKSP_BASE + $031F
WKSP_ADFS_321			= WKSP_BASE + $0321
WKSP_ADFS_322			= WKSP_BASE + $0322
WKSP_ADFS_331			= WKSP_BASE + $0331
WKSP_ADFS_332			= WKSP_BASE + $0332
WKSP_ADFS_333_LASTACCDRV	= WKSP_BASE + $0333

; Per-channel EXT 32 bit value across 4 tables
WKSP_ADFS_334_CH_EXT_H		= WKSP_BASE + $0334
WKSP_ADFS_33E_CH_EXT_MH		= WKSP_BASE + $033E
WKSP_ADFS_348_CH_EXT_ML		= WKSP_BASE + $0348
WKSP_ADFS_352_CH_EXT_L		= WKSP_BASE + $0352

; Per-channel PTR 32 bit value across 4 tables
WKSP_ADFS_35C_CH_PTR_H		= WKSP_BASE + $035C
WKSP_ADFS_366_CH_PTR_MH		= WKSP_BASE + $0366
WKSP_ADFS_370_CH_PTR_ML		= WKSP_BASE + $0370
WKSP_ADFS_37A_CH_PTR_L		= WKSP_BASE + $037A


WKSP_ADFS_383			= WKSP_BASE + $0383
WKSP_ADFS_384			= WKSP_BASE + $0384
WKSP_ADFS_38E			= WKSP_BASE + $038E
WKSP_ADFS_398			= WKSP_BASE + $0398
WKSP_ADFS_3A2			= WKSP_BASE + $03A2
WKSP_ADFS_3AC_CH_FLAGS		= WKSP_BASE + $03AC
CH_FLAGS_80_WRITEABLE		= $80
CH_FLAGS_04_ATEOF		= $04			; PTR == EXT
CH_FLAGS_08_EOF_READ		= $08			; already BGET'd EOF, fail if another BGET

WKSP_ADFS_3B6			= WKSP_BASE + $03B6
WKSP_ADFS_3C0			= WKSP_BASE + $03C0
WKSP_ADFS_3CA			= WKSP_BASE + $03CA
WKSP_ADFS_3D4			= WKSP_BASE + $03D4
WKSP_ADFS_3DE			= WKSP_BASE + $03DE
WKSP_ADFS_3E8			= WKSP_BASE + $03E8
WKSP_ADFS_3F2			= WKSP_BASE + $03F2

;;
;; C3AC-B3 open channel flags
;;


;; User Disk Access
;; ================
;; Do a disk access using SCSI API. Control block at &C215-&C224
;;
;;    Addr Ctrl
;;   &C215  Returned result
;;   &C216  Addr0
;;   &C217  Addr1
;;   &C218  Addr2
;;   &C219  Addr3
;;   &C21A  Command
;;   &C21B  Drive+Sector b16-b20
;;   &C21C  Sector b8-b15
;;   &C21D  Sector b0-b7
;;   &C21E  Sector Count
;;   &C21F  -
;;   &C220  Length0
;;   &C221  Length1
;;   &C222  Length2
;;   &C223  Length3
;;   &C224

ZP_ADFS_C2_SAVE_Y		= $C2
ZP_ADFS_C3_SAVE_X		= $C3

ZP_ADFS_HD_STATUS		= $CC
ZP_ADFS_CF_CHANNEL_OFFS	= $CF

.if TARGETOS = 0
	ZP_ELK_CE_NMIPTR	= $CE	; data pointer in NMI routines, temporarily used in NMI routines

	NMI_ELK_RTN_PTR		= $0D10 ; data access routine pointer
	NMI_ELK_MODE_SAVE 	= $0D12	; save the mode before blanking
	NMI_ELK_SAVE_CE		= $0D13
	NMI_ELK_SAVE_CF		= $0D14
	NMI_ELK_SAVE_CPUFLAGS	= $0D16 ; save the cpu flags before starting NMI
.endif

; FS ZP variables
;; ZP_ADFS_FLAGS (&CD) ADFS status flag
;; --------------------
ZP_ADFS_FLAGS			= $CD

ADFS_FLAGS_TUBE_PRESENT		= $80	; b7 Tube present
ADFS_FLAGS_TUBE_INUSE		= $40 	; b6 Tube being used
ADFS_FLAGS_HD_PRESENT		= $20	; b5 Hard Drive present
ADFS_FLAGS_FSM_INCONSISTENT	= $10	; b4 FSM in memory inconsistent/being loaded
ADFS_FLAGS_WTF			= $08	; b3 (not documented, unsure)
ADFS_FLAGS_OPT1			= $04	; b2 *OPT1 setting
ADFS_FLAGS_FSM_BAD		= $02	; b1 Bad Free Space Map
ADFS_FLAGS_ENSURING		= $01	; b0 Files being ensured


ZP_ADFS_RETRY_CTDN		= $CE

.endif 